/// <reference types="ember" />
import Service from '@ember/service';
declare const AjaxService: Readonly<typeof Service> & (new (properties?: object | undefined) => {
    contentType: string;
    headers: undefined;
    host: undefined;
    namespace: undefined;
    trustedHosts: undefined;
    request<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    raw<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<import("ember-ajax/-private/types").RawResponse<T>>;
    _makeRequest<T>(hash: import("ember-ajax/-private/types").AJAXOptions): import("ember-ajax/-private/promise").default<import("ember-ajax/-private/types").RawResponse<T>>;
    post<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    put<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    patch<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    del<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    delete<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    get(url: string): any;
    _addTypeToOptionsFor(options: import("ember-ajax/-private/types").AJAXOptions | undefined, method: import("ember-ajax/-private/types").Method): import("ember-ajax/-private/types").AJAXOptions;
    _getFullHeadersHash(headers?: import("ember-ajax/-private/types").Headers | undefined): import("ember-ajax/-private/types").Headers;
    options(url: string, options?: import("ember-ajax/-private/types").AJAXOptions): import("ember-ajax/-private/types").AJAXOptions;
    _buildURL(url: string, options?: import("ember-ajax/-private/types").AJAXOptions): string;
    handleResponse<T>(status: number, headers: import("ember-ajax/-private/types").Headers, payload: T, requestData: import("ember-ajax/-private/types").RequestData): import("ember-ajax/errors").AjaxError | T;
    _createCorrectError(status: number, headers: import("ember-ajax/-private/types").Headers, payload: any, requestData: import("ember-ajax/-private/types").RequestData): import("ember-ajax/errors").AjaxError;
    _matchHosts(host: string | undefined, matcher?: string | RegExp | undefined): boolean;
    _shouldSendHeaders({ url, host }: import("ember-ajax/-private/types").AJAXOptions): boolean;
    generateDetailedMessage(status: number, headers: import("ember-ajax/-private/types").Headers, payload: any, requestData: import("ember-ajax/-private/types").RequestData): string;
    isUnauthorizedError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isForbiddenError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isInvalidError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isBadRequestError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isNotFoundError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isGoneError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isAbortError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isConflictError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isServerError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isSuccess(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    parseErrorResponse(responseText: string): any;
    normalizeErrorResponse(_status: number, _headers: import("ember-ajax/-private/types").Headers, payload: any): any;
} & Service) & (new (...args: any[]) => {
    contentType: string;
    headers: undefined;
    host: undefined;
    namespace: undefined;
    trustedHosts: undefined;
    request<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    raw<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<import("ember-ajax/-private/types").RawResponse<T>>;
    _makeRequest<T>(hash: import("ember-ajax/-private/types").AJAXOptions): import("ember-ajax/-private/promise").default<import("ember-ajax/-private/types").RawResponse<T>>;
    post<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    put<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    patch<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    del<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    delete<T = any>(url: string, options?: import("ember-ajax/-private/types").AJAXOptions | undefined): import("ember-ajax/-private/promise").default<T>;
    get(url: string): any;
    _addTypeToOptionsFor(options: import("ember-ajax/-private/types").AJAXOptions | undefined, method: import("ember-ajax/-private/types").Method): import("ember-ajax/-private/types").AJAXOptions;
    _getFullHeadersHash(headers?: import("ember-ajax/-private/types").Headers | undefined): import("ember-ajax/-private/types").Headers;
    options(url: string, options?: import("ember-ajax/-private/types").AJAXOptions): import("ember-ajax/-private/types").AJAXOptions;
    _buildURL(url: string, options?: import("ember-ajax/-private/types").AJAXOptions): string;
    handleResponse<T>(status: number, headers: import("ember-ajax/-private/types").Headers, payload: T, requestData: import("ember-ajax/-private/types").RequestData): import("ember-ajax/errors").AjaxError | T;
    _createCorrectError(status: number, headers: import("ember-ajax/-private/types").Headers, payload: any, requestData: import("ember-ajax/-private/types").RequestData): import("ember-ajax/errors").AjaxError;
    _matchHosts(host: string | undefined, matcher?: string | RegExp | undefined): boolean;
    _shouldSendHeaders({ url, host }: import("ember-ajax/-private/types").AJAXOptions): boolean;
    generateDetailedMessage(status: number, headers: import("ember-ajax/-private/types").Headers, payload: any, requestData: import("ember-ajax/-private/types").RequestData): string;
    isUnauthorizedError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isForbiddenError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isInvalidError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isBadRequestError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isNotFoundError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isGoneError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isAbortError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isConflictError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isServerError(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    isSuccess(status: number, _headers: import("ember-ajax/-private/types").Headers, _payload: any): boolean;
    parseErrorResponse(responseText: string): any;
    normalizeErrorResponse(_status: number, _headers: import("ember-ajax/-private/types").Headers, payload: any): any;
} & Service);
export default AjaxService;
export declare class AjaxServiceClass extends AjaxService {
}
declare module '@ember/service' {
    interface Registry {
        ajax: AjaxServiceClass;
    }
}
